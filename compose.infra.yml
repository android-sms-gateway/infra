services:
  redis:
    image: redis:7
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - internal
    deploy:
      mode: replicated
      replicas: 1
      resources:
        reservations:
          memory: 16M
        limits:
          memory: 128M
      placement:
        constraints:
          - node.role == manager

  db:
    image: mariadb:lts
    environment:
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/mariadb_root_password
      - MARIADB_AUTO_UPGRADE
    healthcheck:
      test:
        [
          "CMD",
          "healthcheck.sh",
          "--su-mysql",
          "--connect",
          "--innodb_initialized"
        ]
      timeout: 5s
      retries: 10
    volumes:
      - mariadb-data:/var/lib/mysql
    networks:
      - internal
    configs:
      - source: db-51-replication.cnf
        target: /etc/mysql/mariadb.conf.d/51-replication.cnf
    secrets:
      - mariadb_root_password
    deploy:
      mode: replicated
      replicas: 1
      resources:
        reservations:
          memory: 128M
        limits:
          memory: 512M
      placement:
        constraints:
          - node.role == manager
  
  db-backup:
    image: ghcr.io/capcom6/mariadb-backup-s3:latest
    environment:
      - AWS_REGION=${DB_BACKUP__AWS_REGION}
      - AWS_ACCESS_KEY=${DB_BACKUP__AWS_ACCESS_KEY_ID}
      - AWS_SECRET_KEY=${DB_BACKUP__AWS_SECRET_ACCESS_KEY}
      - MARIADB__HOST=db
      - MARIADB__USER=backup
      - MARIADB__PASSWORD=${DB_BACKUP__PASSWORD}
      - MARIADB__BACKUP_OPTIONS=${DB_BACKUP__OPTIONS}
      - STORAGE__URL=${DB_BACKUP__STORAGE_URL}
    volumes:
      - mariadb-data:/var/lib/mysql
    networks:
      - internal
    deploy:
      mode: replicated
      replicas: 0
      labels:
        - "swarm.cronjob.enable=true"
        - "swarm.cronjob.schedule=${DB_BACKUP__SCHEDULE:-'@daily'}"
        - "swarm.cronjob.skip-running=true"
      restart_policy:
        condition: none
      resources:
        reservations:
          memory: 256M
        limits:
          memory: 256M
      placement:
        constraints:
          - node.role == manager

  db-admin:
    image: bitnami/phpmyadmin:5
    environment:
      - DATABASE_HOST=db
    networks:
      - public
      - internal
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.swarm.network=public"
        - "traefik.http.routers.db-admin.rule=Host(`pma.${ROOT_DOMAIN}`)"
        - "traefik.http.routers.db-admin.entrypoints=https"
        - "traefik.http.routers.db-admin.tls=true"
        - "traefik.http.routers.db-admin.middlewares=db-admin-auth"
        - "traefik.http.middlewares.db-admin-auth.basicauth.users=${DB_ADMIN_AUTH}"
        - "traefik.http.services.db-admin.loadbalancer.server.port=8080"
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M


  traefik:
    image: traefik:v3
    configs:
      - source: traefik.yml
        target: /etc/traefik/traefik.yml
      - source: dynamic.yml
        target: /etc/traefik/dynamic.yml
    ports:
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 80
        published: 80
        protocol: tcp
        mode: host
    secrets:
      - cloudflare.crt
      - cloudflare.key
    volumes:
      - "letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - public
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.middlewares.dashboard-auth.basicauth.users=${DASHBOARD_AUTH}"
        - "traefik.http.routers.dashboard.rule=Host(`admin.${ROOT_DOMAIN}`)"
        - "traefik.http.routers.dashboard.entrypoints=https"
        - "traefik.http.routers.dashboard.tls.certresolver=le"
        - "traefik.http.routers.dashboard.service=api@internal"
        - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
        - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
      replicas: 1
      resources:
        reservations:
          memory: 32M
        limits:
          memory: 64M
      placement:
        constraints:
          - node.role == manager

  cronjob:
    image: ghcr.io/crazy-max/swarm-cronjob:latest
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - "TZ=${TIMEZONE:-UTC}"
      - "LOG_LEVEL=info"
      - "LOG_JSON=true"
    deploy:
      replicas: 1
      resources:
        reservations:
          memory: 32M
        limits:
          memory: 32M
      placement:
        constraints:
          - node.role == manager

volumes:
  redis-data:
  mariadb-data:
  letsencrypt:
    
configs:
  traefik.yml:
    name: traefik.yml_${STACK_VERSION:-0}
    file: traefik/traefik.yml
  dynamic.yml:
    name: dynamic.yml_${STACK_VERSION:-0}
    file: traefik/dynamic.yml
  db-51-replication.cnf:
    name: db-51-replication.cnf_${STACK_VERSION:-0}
    file: mariadb/51-replication.cnf

secrets:
  mariadb_root_password:
    name: mariadb_root_password
    external: true
  cloudflare.crt:
    name: cloudflare.crt
    external: true
  cloudflare.key:
    name: cloudflare.key
    external: true

networks:
  internal:
    name: internal
    driver: overlay
  public:
    name: public
    driver: overlay
